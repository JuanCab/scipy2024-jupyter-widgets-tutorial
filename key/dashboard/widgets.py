# AUTOGENERATED! DO NOT EDIT! File to edit: ../02b_widgets.ipynb.

# %% auto 0
__all__ = ['DATA_DIR', 'DATA_FILE', 'original_df', 'year_range', 'selected_df', 'selected_dataframe_output', 'window_size',
           'poly_order', 'plot_output', 'on_range_change', 'display_selected_dataframe', 'on_poly_order_change',
           'on_window_size_change', 'display_plot']

# %% ../02b_widgets.ipynb 8
# %answer key/dashboard/widgets.py 6

import pandas as pd
import os
from matplotlib import pyplot as plt
from scipy.signal import savgol_filter
# add import statement for Jupyter widgets
import ipywidgets as widgets

# %% ../02b_widgets.ipynb 12
# Load data into memory from file
DATA_DIR = 'data'
DATA_FILE = 'land-ocean-temp-index.csv'

original_df = pd.read_csv(os.path.join(DATA_DIR, DATA_FILE), escapechar='#')

# %% ../02b_widgets.ipynb 15
year_range = widgets.IntRangeSlider(description = 'Range of Years')

# %% ../02b_widgets.ipynb 21
# %answer key/dashboard/widgets.py 21

year_range.max =  max(original_df['Year']) # set the 'max' attribute of the slider to the minimum year of the our data
year_range.min = min(original_df['Year'])  # and let's do the same for 'min'

# %% ../02b_widgets.ipynb 27
# %answer key/dashboard/widgets.py 27

selected_df = original_df[(original_df['Year'] >= year_range.value[0]) & (original_df['Year'] <= year_range.value[1])] # selected_df = original_df[(original_df['Year'] >= from_year) & (original_df['Year'] <= to_year)]


# %% ../02b_widgets.ipynb 37
# Create a function that will change the selected_df based on the range of
# years selected by the user using the year_range widget
def on_range_change(change):
    global selected_df
    selected_df = original_df[(original_df['Year'] >= year_range.value[0]) & (original_df['Year'] <= year_range.value[1])] 

# Attach the above function to the 'value' attribute of the widget so that
# it gets called whenever a trait of the widget changes.
year_range.observe(on_range_change, 'value')

# %% ../02b_widgets.ipynb 46
# %answer key/dashboard/widgets.py  46

year_range.observe(on_range_change, 'value')

# %% ../02b_widgets.ipynb 50
# Create an Output widget to display the selected data
selected_dataframe_output = widgets.Output()

# %% ../02b_widgets.ipynb 55
# Create a function that will display the selected dataframe
def display_selected_dataframe(change):
    selected_dataframe_output.clear_output(wait=True)
    with selected_dataframe_output:
        display(selected_df)

# Start by displaying nothing
display_selected_dataframe(None)

# %% ../02b_widgets.ipynb 57
year_range.observe(display_selected_dataframe, 'value')

# %% ../02b_widgets.ipynb 65
window_size = widgets.IntSlider(description = 'Window Size', min=1, max=100)

# %% ../02b_widgets.ipynb 67
poly_order = widgets.BoundedIntText(description = 'Poly Order', min=0, max=10)

# %% ../02b_widgets.ipynb 75
# %answer key/dashboard/widgets.py 75

def on_poly_order_change(change):
    global original_df, selected_df
    original_df['Savitzky-Golay'] = savgol_filter(original_df['Temperature'], window_size.value, change['new']) # original_df['Savitzky-Golay'] = savgol_filter(original_df['Temperature'], window_size, poly_order)
    selected_df = original_df[(original_df['Year'] >= year_range.value[0]) & (original_df['Year'] <= year_range.value[1])]


# %% ../02b_widgets.ipynb 76
poly_order.observe(on_poly_order_change, 'value')
window_size.observe(display_selected_dataframe, 'value')

# %% ../02b_widgets.ipynb 81
# %answer key/dashboard/widgets.py 81

def on_window_size_change(change):
    global original_data, selected, poly_order
    poly_order.max = min(10, change['new'] - 1)  # change the maximum of the poly_order widget
    original_df['Savitzky-Golay'] = savgol_filter(original_df['Temperature'], change['new'], poly_order.value)
    selected_df = original_df[(original_df['Year'] >= year_range.value[0]) & (original_df['Year'] <= year_range.value[1])]


# %% ../02b_widgets.ipynb 83
window_size.observe(on_window_size_change, 'value')
window_size.observe(display_selected_dataframe, 'value')

# %% ../02b_widgets.ipynb 86
window_size.value = 10
poly_order.value = 1

# %% ../02b_widgets.ipynb 91
# %answer key/dashboard/widgets.py 91

plot_output = widgets.Output() # create an output widget called plot_output

# %% ../02b_widgets.ipynb 95
def display_plot(change):
    plot_output.clear_output(wait=True)
    with plot_output:
        plt.xlabel('Year')
        plt.ylabel('Temperature')
        plt.title('Global Temperature versus Time')
        plt.plot(selected_df['Year'], selected_df['Temperature'])
        plt.plot(selected_df['Year'], selected_df['Savitzky-Golay'])
        plt.show()

# %% ../02b_widgets.ipynb 99
year_range.observe(display_plot, 'value')
window_size.observe(display_plot, 'value')
poly_order.observe(display_plot, 'value')

# %% ../02b_widgets.ipynb 100
year_range.value = (1900, 2000)
